<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vectorization | The C++ scientist]]></title>
  <link href="http://jmabille.github.io/blog/categories/vectorization/atom.xml" rel="self"/>
  <link href="http://jmabille.github.io/"/>
  <updated>2014-10-13T02:53:54+02:00</updated>
  <id>http://jmabille.github.io/</id>
  <author>
    <name><![CDATA[Johan Mabille]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing C++ Wrappers for SIMD Intrinsics (3)]]></title>
    <link href="http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-3/"/>
    <updated>2014-10-10T02:35:03+02:00</updated>
    <id>http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-3</id>
    <content type="html"><![CDATA[<h2 id="a-namesection2a2-first-version-of-wrappers"><a name="section_2"></a>2. First version of wrappers</h2>

<p>Now that we know a little more about SSE and AVX, let’s start writing code; the wrappers will have
a data vector member and provide arithmetic, comparison and logical operators overloads. Through this
section, I will mainly focus on vector4f, the wrapper around __m128, but translating the code for
other data vectors should not be difficult thanks to the previous section. Since the wrappers will be
used as numerical types, they must have value semantics, that is they must define copy constructor,
assignment operator and non-virtual destructor.</p>

<!-- more -->

<h3 id="initialization-and-assignment">2.1 Initialization and assignment</h3>

<p>SSE and AVX data vectors can be initialized from different inputs : a single value for all elements,
a value per element, or another data vector.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span>
{
<span class="directive">public</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4f() {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f) : m_value(_mm_set1_ps(f)) {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f0, <span class="predefined-type">float</span> f1, <span class="predefined-type">float</span> f2, <span class="predefined-type">float</span> f3) : m_value(_mm_setr_ps(f0,f1,f2,f3)) {}
<span class="directive">inline</span> vector4f(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> vector4f(<span class="directive">const</span> vector4f&amp;amp; rhs) : m_value(rhs.m_value) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> vector4f&amp;amp; rhs)
{
    m_value = rhs.m_value;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; }; </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<h3 id="implicit-conversion">2.2 Implicit conversion</h3>

<p>The operators overloads have to access the m_value member of the wrapper so they can pass it as an argument to the intrinsic
functions :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>overload sample</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_add_ps(lhs.m_value,rhs.m_value);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>We could declare the operator overloads as friend functions of the wrapper class, or provide a get method returning the internal
m_value. Both of these solutions work, but aren’t elegant : the first requires a huge amount of friend declaration, the second
produces heavy code unpleasant to read.</p>

<p>A more elegant solution is to provide a conversion operator from vector4f to __m128 ; since vector4f can be implicitly converted
from __m128, we can now use vector4f or __m128 indifferently. Moreover we can save the vector4f copy constructor and assignment
operator :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span>
{
<span class="directive">public</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4f() {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f) : m_value(_mm_set1_ps(f)) {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f0, <span class="predefined-type">float</span> f1, <span class="predefined-type">float</span> f2, <span class="predefined-type">float</span> f3) : m_value(_mm_setr_ps(f0,f1,f2,f3)) {}
<span class="directive">inline</span> vector4f(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> <span class="directive">operator</span> __m128() <span class="directive">const</span> { <span class="keyword">return</span> m_value; }

<span class="comment">// vector4f(const vector4f&amp;amp;) and operator=(const vector4f&amp;amp;) are not required anymore :</span>
<span class="comment">// the conversion operator will be called before calling vector4f(const __m128&amp;amp;)</span>
<span class="comment">// or operator=(const __m128&amp;amp;)</span>
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; }; </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<h3 id="arithmetic-operators-overloads">2.3 Arithmetic operators overloads</h3>

<p>Next step is to write the arithmetic operators overloads. The classic way to do this is to write
computed assignment operators and to use them in operator overloads, so they don’t have to access
private members of vector4f ; but since vector4f can be implicitly converted to __m128, we can
do the opposite and avoid using a temporary (this won’t have any impact on performance since
the compiler can optimize it, but produces shorter and more pleasant code to read) :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span>
{
<span class="directive">public</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="comment">// ...</span>

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>+=(<span class="directive">const</span> vector4f&amp;amp; rhs)
{
    *<span class="local-variable">this</span> = *<span class="local-variable">this</span> + rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
} };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_add_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<h3 id="the-need-for-a-base-class">2.4 The need for a base class</h3>

<p>We could go ahead and write the remaining arithmetic operators overloads, just as we did before :
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
</pre></td>
  <td class="code"><pre>
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp;, <span class="directive">const</span> vector4f&amp;amp;);
<span class="comment">// Adds the same float value to each data vector member</span>
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp;, <span class="directive">const</span> <span class="predefined-type">float</span>&amp;amp;);
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> <span class="predefined-type">float</span>&amp;amp;, <span class="directive">const</span> vector4f&amp;amp;);&lt;/p&gt;

&lt;p&gt;<span class="comment">// Similar for operator-, operator* and operator/</span>
<span class="comment">// …&lt;/p&gt;</span>

&lt;p&gt;vector4f <span class="directive">operator</span>-(<span class="directive">const</span> vector4f&amp;amp;);&lt;/p&gt;

&lt;p&gt;vector4f&amp;amp; <span class="directive">operator</span>++();
vector4f <span class="directive">operator</span>++(<span class="predefined-type">int</span>);&lt;/p&gt;

&lt;p&gt;<span class="comment">// Similar for operator–</span>
<span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>But wait! Whenever you add a new wrapper, you’ll have to write these operators overloads again. Besides
the fact you’ll type a lot of boilerplate code, computed assignment operators will be the same as those
of vector4f (that is, invoke the corresponding operator overload and return the object), and even some
operators overloads will have the same code as the one of vector4f operators. Code duplication is never
good, and we should look for ways to avoid it.</p>

<p>If we had encountered this problem for classes with entity semantics, we would have captured the common code
into a base class, and delegate the specific behavior to virtual methods, a typical use of classical dynamic
polymorphism. What we need here is an equivalent architecture for classes with value semantics and no virtual
methods (since virtual assignment operators are nonsense). This equivalent architecture is the CRTP
(Curiously Recurring Template Pattern). A lot has been written about CRTP and I will not dwell on it. If you
don’t know about this pattern, the most important thing to know is CRTP allows you to invoke methods of inherite
classes from the base class just as you would do through virtual methods, except the target method is resolved
at compile time.</p>

<p>Let’s call our base class simd_vector, it will be used as base class for every wrapper ; here is what it should
look like :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_base.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
<a href="#n66" name="n66">66</a>
<a href="#n67" name="n67">67</a>
<a href="#n68" name="n68">68</a>
<a href="#n69" name="n69">69</a>
<strong><a href="#n70" name="n70">70</a></strong>
<a href="#n71" name="n71">71</a>
<a href="#n72" name="n72">72</a>
<a href="#n73" name="n73">73</a>
<a href="#n74" name="n74">74</a>
<a href="#n75" name="n75">75</a>
<a href="#n76" name="n76">76</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">struct</span> simd_vector_traits;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">class</span> <span class="class">simd_vector</span>
    {
    <span class="directive">public</span>:&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="keyword">typedef</span> <span class="keyword">typename</span> simd_vector_traits&amp;lt;X&amp;gt;::value_type value_type;

    <span class="comment">// downcast operators so we can call inherited methods</span>
    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>()() { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;X*&amp;gt;(<span class="local-variable">this</span>); }
    <span class="directive">inline</span> <span class="directive">const</span> X&amp;amp; <span class="directive">operator</span>()() <span class="directive">const</span> { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;<span class="directive">const</span> X*&amp;gt;(<span class="local-variable">this</span>); }

    <span class="comment">// Additional assignment operators</span>
    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>+=(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>)() + rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>+=(<span class="directive">const</span> value_type&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>)() + X(rhs);
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="comment">// Same for operator-=, operator*=, operator/= ...</span>
    <span class="comment">// ...</span>

    <span class="comment">// Increment operators</span>
    <span class="directive">inline</span> X <span class="directive">operator</span>++(<span class="predefined-type">int</span>)
    {
        X tmp = (*<span class="local-variable">this</span>)();
        (*<span class="local-variable">this</span>) += value_type(<span class="integer">1</span>);
        <span class="keyword">return</span> tmp;
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>++()
    {
        (*<span class="local-variable">this</span>)() += value_type(<span class="integer">1</span>);
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="comment">// Similar decrement operators</span>
    <span class="comment">// ...</span>

<span class="directive">protected</span>:

    <span class="comment">// Ensure only inheriting classes can instantiate / copy / assign simd_vector.</span>
    <span class="comment">// Avoids incomplete copy / assignment from client code.</span>
    <span class="directive">inline</span> simd_vector() {}
    <span class="directive">inline</span> ~simd_vector() {}

    <span class="directive">inline</span> simd_vector(<span class="directive">const</span> simd_vector&amp;amp;) {}
    <span class="directive">inline</span> simd_vector&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span>  simd_vector&amp;amp;) { <span class="keyword">return</span> *<span class="local-variable">this</span>; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> simd_vector&lt;x&gt; <span class="directive">operator</span>+(<span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; lhs,
                                    <span class="directive">const</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::type&amp;amp; rhs)
    {
        <span class="keyword">return</span> lhs() + X(rhs);
    }&lt;/x&gt;&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> simd_vector&lt;x&gt; <span class="directive">operator</span>+(<span class="directive">const</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::type&amp;amp; lhs,
                                    <span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> X(lhs) + rhs();
    }&lt;/x&gt;&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="comment">// Same for operator-, operator*, operator/</span>
<span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Now, all vector4f needs to do is to inherit from simd_vector and implement the traditional operator+, and
it will get operator+= and the operator+ overloads for free (and the same for other arithmetic operators) :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span> : <span class="directive">public</span> simd_vector&lt;vector4f&gt;
{
<span class="directive">public</span>:&lt;/vector4f&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4f() {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f) : m_value(_mm_set1_ps(f)) {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f0, <span class="predefined-type">float</span> f1, <span class="predefined-type">float</span> f2, <span class="predefined-type">float</span> f3) : m_value(_mm_setr_ps(f0,f1,f2,f3)) {}
<span class="directive">inline</span> vector4f(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> <span class="directive">operator</span> __m128() <span class="directive">const</span> { <span class="keyword">return</span> m_value; }

<span class="comment">// No more operator+= since it is implemented in the base class</span>
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="comment">// Base on this operator implementation, simd_vector&lt;vector4f&gt; will generate</span>
<span class="comment">// the following methods and overloads :</span>
<span class="comment">// vector4f&amp;amp; operator+=(const vector4f&amp;amp;)</span>
<span class="comment">// vector4f operator++(int)</span>
<span class="comment">// vector4f&amp;amp; operator++()</span>
<span class="comment">// vector4f operator+(const vector4f&amp;amp;, ocnst float&amp;amp;)</span>
<span class="comment">// vector4f operator+(const float&amp;amp;, const vector4f&amp;amp;)</span>
<span class="directive">inline</span> vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_add_ps(lhs,rhs);
}&lt;/vector4f&gt;&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>-(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_sub_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>*(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_mul_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>/(<span class="directive">const</span> vetcor4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_div_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Looks good, doesn’t it ? Every time we want to implement a new wrapper, we only have to code 4 operators and
make our class inherit from simd_vector, and all overloads will be generated for free!</p>

<p>Just one remark before we continue with comparison operators ; if you have noticed, the base class simd_vector
defines a type named value_type, depending on the nature of the inheriting class (float for vector4f, double
for vector2d, …). However, this type is not defined by the inheriting class, but by a traits class instead.
This is a CRTP constraint : you can access the inheriting class as long the compiler doesn’t instantiate the
code; if you call a method defined in the inheriting class, the compiler will assume it exists until it has to
instantiate the code. But type resolution is different and you have to define it out of the inheriting class.
This is one reason for the existence of the simd_vector_traits class. Other reasons will be discussed in a later
section. Note the class containing the type definition doesn’t have to be fully defined at this point : a simple
forward declaration is sufficient.</p>

<h3 id="comparison-operators">2.5 Comparison operators</h3>

<p>Since ordinary comparison operators return boolean value, we need to implement SIMD wrappers for boolean. The
number of boolean elements of the wrappers will be directly related to the number of floating values wrapped
by our arithmetic wrappers.</p>

<p>In order not to duplicate code, we’ll use the same architecture as for arithmetic wrappers : a CRTP with
base class for common code, and inheriting classes for specific implementation. Here is the implementation
of the simd_vector_bool class, the base used to generate bitwise assignment operators and logical operators
overloads in inheriting classes :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_base.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">class</span> <span class="class">simd_vector_bool</span>
    {
    <span class="directive">public</span>:&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>()() { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;X*&amp;gt;(<span class="local-variable">this</span>); }
    <span class="directive">inline</span> <span class="directive">const</span> X&amp;amp; <span class="directive">operator</span>()() <span class="directive">const</span> { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;<span class="directive">const</span> X*&amp;gt;(<span class="local-variable">this</span>); }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>&amp;amp;=(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>) = (*<span class="local-variable">this</span>) &amp;amp;&amp;amp; rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>|(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>) || rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>^=(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>)() ^ rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

<span class="directive">protected</span>:

    <span class="directive">inline</span> simd_vector_bool() {}
    <span class="directive">inline</span> ~simd_vector_bool() {}

    <span class="directive">inline</span> simd_vector_bool(<span class="directive">const</span> simd_vector_bool&amp;amp;) {}
    <span class="directive">inline</span> simd_vector_bool&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> simd_vector_bool&amp;amp;) { <span class="keyword">return</span> *<span class="local-variable">this</span>; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>&amp;amp;&amp;amp;(<span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; lhs, <span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> lhs() &amp;amp; rhs();
    }&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>&amp;amp;&amp;amp;(<span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; lhs, <span class="predefined-type">bool</span> rhs)
    {
        <span class="keyword">return</span> lhs() &amp;amp; rhs;
    }&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>||(<span class="predefined-type">bool</span> lhs, <span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> lhs &amp;amp; rhs();
    }&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="comment">// Similar for operator|| overloads</span>
<span class="comment">// …&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>!(<span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> rhs() == <span class="integer">0</span>;
    }
</pre></td>
</tr></table>
 </figure></notextile></div></x></class></p>

<p>The inheriting class vector4fb only has to provide bitwise operators and equality/inequality operators :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4fb</span> : <span class="directive">public</span> simd_vector_bool&lt;vector4fb&gt;
{
<span class="directive">public</span>:&lt;/vector4fb&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4fb() {}
<span class="directive">inline</span> vector4fb(<span class="predefined-type">bool</span> b) : m_value(_mm_castsi128_ps(_mm_set1_epi32(-(<span class="predefined-type">int</span>)b))) {}
<span class="directive">inline</span> vector4fb(<span class="predefined-type">bool</span> b0, <span class="predefined-type">bool</span> b1, <span class="predefined-type">bool</span> b2, <span class="predefined-type">bool</span> b3)
: m_value(_mm_castsi128_ps(_mm_setr_epi32(-(<span class="predefined-type">int</span>)b0,-(<span class="predefined-type">int</span>)b1,-(<span class="predefined-type">int</span>)b2,-(<span class="predefined-type">int</span>)b3))) {}

<span class="directive">inline</span> vector4fb(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4fb&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> <span class="directive">operator</span> __m128() <span class="directive">const</span> { <span class="keyword">return</span> m_value; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>&amp;amp;(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_and_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>|(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_or_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>^(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_xor_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>~(<span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_xor_ps(rhs,_mm_castsi128_ps(_mm_set1_epi32(-<span class="integer">1</span>)));
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>==(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmeq_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>!=(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmpneq_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Now we have wrappers for boolean, we can add the comparison operators to the vector4f class; again,
to avoid code duplication, some operators will be implemented in the base class and will be based on
specific operators implemented in the inheriting class. Let’s start with the vector4f comparison
operators :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// Definition of vector4f and arithmetic overloads</span>
<span class="comment">// …</span>
<span class="directive">inline</span> vector4fb <span class="directive">operator</span>==(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmpeq_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>!=(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmpneq_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>&amp;lt;(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmplt_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>&amp;lt;=(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmple_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Before we implement operator&gt; and operator&gt;= for the base class, we have to focus on their return
type. If these operators were implemented for vector4f, we would have return vector4fb; but since
they are implemented for the base class, they need to return the boolean wrapper related to the
arithmetic wrapper, i.e the inheriting class. What we need here is to provide a mapping between
arithmetic wrapper type and boolean wrapper type somewhere. Remeber the simd_vector_traits structure
we declared to define our value_type ? It would be the perfect place for defining that mapping :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// simd_vector_traits&lt;vector4f&gt; must be defined before vector4f so simd_vector can compile</span>
<span class="comment">// (remember we use simd_vector_traits&lt;x&gt;::value_type in the definition of simd_vector).</span>
<span class="keyword">class</span> <span class="class">vector4f</span>;&lt;/x&gt;&lt;/vector4f&gt;&lt;/p&gt;

&lt;p&gt;<span class="comment">// Full specialization of the template vector_simd_traits declared in simd_base.hpp</span>
<span class="keyword">template</span> &amp;lt;&amp;gt;
    <span class="keyword">struct</span> vector_simd_traits&lt;vector4f&gt;
    {
        <span class="keyword">typedef</span> <span class="predefined-type">float</span> value_type;
        <span class="keyword">typedef</span> simd_vector4fb vetor_bool;
    };&lt;/vector4f&gt;&lt;/p&gt;

&lt;p&gt;<span class="keyword">class</span> <span class="class">vector4f</span>
{
    <span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>A last remark before we add the last comparison operators : since the template vector_simd_traits
will never be defined but full specialized instead, there is no risk we forget to define it when
we add a new wrapper, we’ll have a compilation error.</p>

<p>Finally, we can add the missing operators for the base class :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_base.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// Declaration of simd_vector and operators</span>
<span class="comment">//…&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::vector_bool
    <span class="directive">operator</span>&amp;gt;(<span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; lhs, <span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> rhs() &amp;lt;= lhs();
    }&lt;/x&gt;&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::vector_bool
    <span class="directive">operator</span>&amp;gt;=(<span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; lhs, <span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> rhs() &amp;lt; lhs();
    }
</pre></td>
</tr></table>
 </figure></notextile></div></x></x></x></class></p>

<h3 id="logical-operators">2.6 Logical operators</h3>

<p>Since float provides logical operators, our wrapper should do so. The implementation is the same
as for the simd_vector_bool class, that is logical assignment operator in the simd_vector base class,
and operator overloads for the inheriting classes. The implementation of operator|, operator&amp;, operator^
and operaotr~ is the same as the one for vector4fb, so I don’t repeat it here.</p>

<h3 id="next-step">2.7 Next step</h3>

<p>Next step is to implement wrapper for 2 double, then wrapper for 8 float and 4 double if you want to support
AVX. You can also implement wrappers for int if you aim to do integre computation. The implementation is
similar to what has been done in this section.</p>

<p>Now we have nice wrappers, we’ll see in the next section how to plug them on existing code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing C++ Wrappers for SIMD Intrinsics (2)]]></title>
    <link href="http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-2/"/>
    <updated>2014-10-10T00:54:37+02:00</updated>
    <id>http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-2</id>
    <content type="html"><![CDATA[<h2 id="a-namesection1a1-sseavx-intrinsics"><a name="section_1"></a>1. SSE/AVX intrinsics</h2>

<p>Before we start to write any code, we need to take a look at the instrinsics the compiler provides, and how things are
organized. For the rest of this article and the following ones, I assume we use an Intel processor, recent enough to
provide SSE 4 and AVX; the compiler can be gcc or MSVC, the instrinsics they provide are almost the same.</p>

<p>If you already know about SSE / AVX intrinsics you can skip this section.
<!-- more --></p>

<h3 id="registers">1.1 Registers</h3>

<p>SSE uses eight 128 bits registers, from xmm0 to xmm7; Intel and AMD 64 bits extensions adds eight more registers, from
xmm8 to xmm15; thus SSE intrinsics can perform on 4 packed float, 2 packed double, 4 32-bits integers, etc …</p>

<p>With AVX, the width of the SIMD registers is increased from 128 to 256 bits; the register are renamed from xmm0-xmm7
to ymm0-ymm7 (and from xmm8-xmm15 to ymm8 to ymm15); however legacy sse instructions still can be used, and xmm
registers can still be addressed since they’re the lower part of ymm registers.</p>

<p>AVX512 will increase the width of the SIMD registers from 256 to 512 bits.</p>

<h3 id="files-to-include">1.2 Files to include</h3>

<p>The intrinsic functions are splitted among different files, depending on the version of the SIMD instruction set they
belong to :</p>

<ul>
  <li>&lt;xmmintrin.h&gt; : SSE, operations on 4 single precision floating point numbers (float).</li>
  <li>&lt;emmintrin.h&gt; : SSE 2, operations on integers and on 2 double precision floating point numbers (double).</li>
  <li>&lt;pmmintrin.h&gt; : SSE 3, horizontal operations on SIMD registers.</li>
  <li>&lt;tmmintrin.h&gt; : SSSE 3, additional instructions.</li>
  <li>&lt;smmintrin.h&gt; : SSE 4.1, dot product and many operations on integers</li>
  <li>&lt;nmmintrin.h&gt; : SSE 4.2, additional instructions.</li>
  <li>&lt;immintrin.h&gt; : AVX, operations on integers, 8 float or 4 double.</li>
</ul>

<p>Each of these files includes the previous one, so you only have to include the one matching the highest version of the SIMD
instruction set available in your processor. Later we’ll see how to detect at compile time which version on SIMD instruction
set is available and thus which file to include. For now, just assume we’re able to include the right file each time we need it.</p>

<h3 id="naming-rules">1.3 Naming rules</h3>

<p>Now if you take a look at these files, you’ll notice provided data and functions follow some naming rules :</p>

<ul>
  <li>data vectors are named <strong>__mXXX(T)</strong>, where :
    <ul>
      <li>XXX is the number of bits of the vector (128 for SSE, 256 for AVX)</li>
      <li>is T a character for the type of the data; T is omitted for float, i fot integers and d for double; thus __m128d is the
  data vector to use when performing SSE instructions on double.</li>
    </ul>
  </li>
  <li>intrinsic functions operating on floating point numbers are usually named <strong>_mm(XXX)_NAME_PT</strong>, where :
    <ul>
      <li>XXX is the number of bits of the SIMD registers; it is omitted for 128 bits regusters</li>
      <li>NAME is the short name of the function (add, sub, cmp, …)</li>
      <li>P indicates whether the functions operates on a packed data vector (p) or on a scalar only (s)</li>
      <li>T indicates the type of the floating point numbers : s for single precision, d for double precision</li>
    </ul>
  </li>
  <li>intrinsic functions operating on integers are usually named <strong>_mm(XXX)_NAME_EPSYY</strong>, where :
    <ul>
      <li>XXX is the number of bits of the SIMD registers; it is omitted for 128 bits registers</li>
      <li>NAME is the short name of the function (add, sub, cmp)</li>
      <li>S indicates whether the integers are signed (i) or unsigned (u)</li>
      <li>YY is the number of bits of the integer</li>
    </ul>
  </li>
</ul>

<h3 id="intrinsics-categories">1.4 Intrinsics categories</h3>

<p>Intrinsics encompass a wide set of features; we can distinguish the following categories (not exhausive) :</p>

<ul>
  <li>Arithmetic : _mm_add_xx, _mm_sub_xx, _mm_mul_xx, _mm_div_xx, …</li>
  <li>Logical : _mm_and_xx, _mm_or_xx, _mm_xor_xx, …</li>
  <li>Comparison : _mm_cmpeq_xx, _mm_cmpneq_xx, _mm_cmplt_xx, …</li>
  <li>Conversion : _mm_cvtepixx, …</li>
  <li>Memory move : _mm_load_xx, _mm_store_xx, …</li>
  <li>Setting : _mm_set_xx, _mm_setzero_xx, …</li>
</ul>

<p>Some intrinsics won’t be wrapped, and some of them will bu used only to build higher level functions in the wrappers.</p>

<h3 id="sample-code">1.5 Sample code</h3>

<p>Now you know a little more about SSE and AVX intrinsics, you may reconsider the need for wrapping them; indeed, if you don’t need
to handle other instructions set, you could think of using SSE/AVX intrinsics directly. I hope this sample code will make you
change your mind :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>SSE_sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// computes e = a&lt;em&gt;b + c&lt;/em&gt;d using SSE where a, b, c, d and e are vector of floats</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; e.size(); i += <span class="integer">4</span>)
{
    __m128 val = _mm_add_ps(_mm_mul_ps(_mm_load_ps(&amp;amp;a[i]),_mm_load_ps(&amp;amp;b[i])),
                            _mm_mul_ps(_mm_load_ps(&amp;amp;c[i]),_mm_load_ps(&amp;amp;d[i])));
    _mm_store_ps(&amp;amp;e[i],val);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Quite hard to read, right ? And this is just for two multiplications and one addition; imagine using intrinsics in a huge amount of code,
and you’ll get code really hard to understand and to maintain. What we need is a way to use __m128 with traditional arithmetic
operators, as we do with float :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>wrapped_sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// computes e = a&lt;em&gt;b + c&lt;/em&gt;d using SSE where a, b, c, d and e are vector of floats</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; e.size(); i += <span class="integer">4</span>)
{
    __m128 val = load(&amp;amp;a[i]) * load(&amp;amp;b[i]) + load(&amp;amp;c[i]) * load(&amp;amp;d[i]);
    store(&amp;amp;e[i],val);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>That’s the aim of the wrappers we start to write in the next section.</p>

]]></content>
  </entry>
  
</feed>
