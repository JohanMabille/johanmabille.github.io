<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vectorization | The C++ scientist]]></title>
  <link href="http://jmabille.github.io/blog/categories/vectorization/atom.xml" rel="self"/>
  <link href="http://jmabille.github.io/"/>
  <updated>2014-11-04T20:46:46+01:00</updated>
  <id>http://jmabille.github.io/</id>
  <author>
    <name><![CDATA[Johan Mabille]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing C++ Wrappers for SIMD Intrinsics (5)]]></title>
    <link href="http://jmabille.github.io/blog/2014/10/25/writing-c-plus-plus-wrappers-for-simd-intrinsics-5/"/>
    <updated>2014-10-25T11:28:18+02:00</updated>
    <id>http://jmabille.github.io/blog/2014/10/25/writing-c-plus-plus-wrappers-for-simd-intrinsics-5</id>
    <content type="html"><![CDATA[<h2 id="making-the-code-more-generic">4. Making the code more generic</h2>

<p>In the previous section we saw how to plug the wrappers into existing code and ended up with the following loop:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt; a, b, c, d, e
<span class="comment">// Somewhere in the code the vectors are resized</span>
<span class="comment">// so they hold n elements</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/<span class="integer">4</span>; i+=<span class="integer">4</span>)
{
    vector4f av; av.load_a(&amp;amp;a[i]);
    vector4f bv; bv.load_a(&amp;amp;b[i));
    vector4f cv; cv.load_a(&amp;amp;c[i]);
    vector4f dv; dv.load_a(&amp;amp;d[i]);&lt;/<span class="predefined-type">float</span>&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vector4f ev = av*bv + cv*dv;
ev.store_a(&amp;amp;e[i]); } <span class="comment">// Remaining part of the loop // ... </span></pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<!-- more -->

<p>As said in the previous section, the first problem of this code is its lack of genericity; we are highly coupled to the
SIMD instruction set wrapped, and replacing it with another one requires code changes we should avoid. If we want to make
the code independant from the SIMD instruction set and the related wrapper, we need to hide the data specific to this
instruction set, that is, the vector type and its size (the number of scalars it holds).</p>

<h3 id="hiding-the-wrapper-type">4.1 Hiding the wrapper type</h3>

<p>Basically, we want to be able to select the right wrapper depending on the scalar type and the instruction set used. When
talking about selecting a type depending on another one, the first thing that comes to mind is type traits. Here our traits
must contain the wrapper type and its size depending on the scalar type used:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_vector_traits.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">t</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">struct</span> simd_vector_traits
    {
        <span class="keyword">typedef</span> T type;
        <span class="directive">static</span> <span class="directive">const</span> size_t size = <span class="integer">1</span>;
    };
</pre></td>
</tr></table>
 </figure></notextile></div></class></p>

<p>The general definition of the traits class allows us to write code that works even for types that don’t have related
wrappers (numerical types defined by another user for instance). Then we need to specialize these definitions for float
and double, depending on the instruction set we used. Assume we can detect the instruction set available on our system
and save this information in a macro (we’ll see how to do that in a later section). The specialization of the traits
class will look like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
</pre></td>
  <td class="code"><pre>
<span class="preprocessor">#ifdef</span> USE_SSE
<span class="keyword">template</span> &amp;lt;&amp;gt;
    <span class="keyword">struct</span> simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;
    {
        <span class="keyword">typedef</span> vector4f type;
        <span class="directive">static</span> <span class="directive">const</span> size_t size = <span class="integer">4</span>;
    };&lt;/<span class="predefined-type">float</span>&gt;&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &amp;lt;&amp;gt;
    <span class="keyword">struct</span> simd_vector_traits&lt;<span class="predefined-type">double</span>&gt;
    {
        <span class="keyword">typedef</span> vector2d type;
        <span class="directive">static</span> <span class="directive">const</span> size_t size = <span class="integer">2</span>;
    };
<span class="preprocessor">#elif</span> USE_AVX
<span class="keyword">template</span> &amp;lt;&amp;gt;
    <span class="keyword">struct</span> simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;
    {
        <span class="keyword">typedef</span> vector8f type;
        <span class="directive">static</span> <span class="directive">const</span> size_t size = <span class="integer">8</span>;
    };&lt;/<span class="predefined-type">float</span>&gt;&lt;/<span class="predefined-type">double</span>&gt;&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &amp;lt;&amp;gt;
    <span class="keyword">struct</span> simd_vector_traits&lt;<span class="predefined-type">double</span>&gt;
    {
        <span class="keyword">typedef</span> vector4d type;
        <span class="directive">static</span> <span class="directive">const</span> size_t size = <span class="integer">4</span>;
    };
<span class="preprocessor">#endif</span>
</pre></td>
</tr></table>
 </figure></notextile></div></double></p>

<p>Now we can adapt the loop so it doesn’t explicitly refer to the vector4f type:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt; a,b,c,d,e;
<span class="comment">// ... resize a, b, c, d, and e so they hold n elements</span>
<span class="keyword">typedef</span> simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;::type vec_type;
size_t vec_size = simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;::size;
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/vec_size; i += vec_size)
{
    vec_type av; av.load_a(&amp;amp;a[i]);
    vec_type bv; bv.load_a(&amp;amp;b[i));
    vec_type cv; cv.load_a(&amp;amp;c[i]);
    vec_type dv; dv.load_a(&amp;amp;d[i]);&lt;/<span class="predefined-type">float</span>&gt;&lt;/<span class="predefined-type">float</span>&gt;&lt;/<span class="predefined-type">float</span>&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vec_type ev = av*bv + cv*dv;
ev.store_a(&amp;amp;e[i]); } <span class="comment">// Remaining part of the loop // ... </span></pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>That’s it! If we need to compile this code on a system where AVX is available, we have nothing to do. The macro
USE_AVX will be defined, the specialization of simd_traits with vector8f as inner type will be instantiated,
and the loop will use the vector8f wrapper and the AVX intrinsics. However, there’s still a problem: we can
migrate to any SIMD instruction set for which a wrapper is available, but we can’t use types that don’t have
related wrappers. The simd_traits works fine even for user defined types, but the load and store functions are
available for wrappers only. We need to provide generic versions of these functions that work with any type.</p>

<h3 id="generic-load-an-store-functions">4.2 Generic load an store functions</h3>

<p>Actually, all we have to do is to provide two versions of these functions: one for types that don’t have related
wrappers, and one that works with wrappers. Template specialization can be of help here, but since partial
specialization is not possible for functions, let’s wrap them into a simd_functions_invoker class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// Common implementation for types that support vectorization</span>
<span class="keyword">template</span> &amp;lt;<span class="keyword">class</span> <span class="class">T</span>, <span class="keyword">class</span> <span class="class">V</span>&amp;gt;
    <span class="keyword">struct</span> simd_functions_invoker
    {
        <span class="directive">inline</span> <span class="directive">static</span> V
        set1(<span class="directive">const</span> T&amp;amp; a) { <span class="keyword">return</span> V(a); }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="directive">inline</span> <span class="directive">static</span> V
    load_a(<span class="directive">const</span> T* src) { V res; res.load_a(src); }

    <span class="directive">inline</span> <span class="directive">static</span> V
    load_u(<span class="directive">const</span> T* src) { V res; res.load_u(src); }

    <span class="directive">inline</span> <span class="directive">static</span> <span class="directive">void</span>
    store_a(T* dst, <span class="directive">const</span> V&amp;amp; src) { src.store_a(dst); }

    <span class="directive">inline</span> <span class="directive">static</span> <span class="directive">void</span>
    store_u(T* dst, <span class="directive">const</span> V&amp;amp; src) { src.store_u(dst); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="comment">// Specialization for types that don’t support vectorization</span>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">t</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">struct</span> simd_functions_invoker&amp;lt;T,T&amp;gt;
    {
        <span class="directive">inline</span> <span class="directive">static</span> T
        set1(<span class="directive">const</span> T&amp;amp; a) { <span class="keyword">return</span> V(a); }&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="directive">inline</span> <span class="directive">static</span> T
    load_a(<span class="directive">const</span> T* src) { <span class="keyword">return</span> *src; }

    <span class="directive">inline</span> <span class="directive">static</span> T
    load_u(<span class="directive">const</span> T* src) { <span class="keyword">return</span> *src; }

    <span class="directive">inline</span> <span class="directive">static</span> <span class="directive">void</span>
    store_a(T* dst, <span class="directive">const</span> T&amp;amp; src) { *dst = src; }

    <span class="directive">inline</span> <span class="directive">static</span> <span class="directive">void</span>
    store_u(T* dst, <span class="directive">const</span> T&amp;amp; src) { *dst = src; }
}; </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>We’ve added the set1 function so we can intialize wrappers and scalar type from a single value in an
uniform way. Calling the generic functions would look like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">typedef</span> simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;::simd_type vec_type;
vec_type va = simd_functions_invoker&amp;lt;<span class="predefined-type">float</span>,vec_type&amp;gt;::load_a(a);
</pre></td>
</tr></table>
 </figure></notextile></div></float></p>

<p>That’s too much verbose. Let’s add facade functions that deduce template parameters for us:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
</pre></td>
  <td class="code"><pre>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">t</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt; <span class="directive">inline</span> <span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type
set1(<span class="directive">const</span> T&amp;amp; a)
{ <span class="keyword">return</span> simd_functions_invoker&amp;lt;T,<span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type&amp;gt;::set1(a); }&lt;/t&gt;&lt;/t&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">t</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt; <span class="directive">inline</span> <span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type
load_a(<span class="directive">const</span> T* src)
{ <span class="keyword">return</span> simd_functions_invoker&amp;lt;T,<span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type&amp;gt;::load_a(src); }&lt;/t&gt;&lt;/t&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">t</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt; <span class="directive">inline</span> <span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type
load_u(<span class="directive">const</span> T* src)
{ <span class="keyword">return</span> simd_functions_invoker&amp;lt;T,<span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type&amp;gt;::load_u(src); }&lt;/t&gt;&lt;/t&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">t</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt; <span class="directive">inline</span> <span class="directive">void</span>
store_a(T* dst, <span class="directive">const</span> <span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type&amp;amp; src)
{ simd_functions_invoker&amp;lt;T,<span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type&amp;gt;::store_a(dst,src); }&lt;/t&gt;&lt;/t&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">t</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt; <span class="directive">inline</span> <span class="directive">void</span>
store_u(T* dst, <span class="directive">const</span> <span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type&amp;amp; src)
{ simd_functions_invoker&amp;lt;T,<span class="keyword">typename</span> simd_vector_traits&lt;t&gt;::type&amp;gt;::store_u(dst,src); }
</pre></td>
</tr></table>
 </figure></notextile></div></t></t></class></p>

<p>Now we can use these generic functions in the previous loop so it works with any type, even those
which don’t support vectorization:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt; a,b,c,d,e;
<span class="comment">// ... resize a, b, c, d, and e so they hold n elements</span>
<span class="keyword">typedef</span> simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;::type vec_type;
size_t vec_size = simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;::size;
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/vec_size; i += vec_size)
{
    vec_type av = load_a(&amp;amp;a[i]);
    vec_type bv = load_a(&amp;amp;b[i));
    vec_type cv = load_a(&amp;amp;c[i]);
    vec_type dv = load_a(&amp;amp;d[i]);&lt;/<span class="predefined-type">float</span>&gt;&lt;/<span class="predefined-type">float</span>&gt;&lt;/<span class="predefined-type">float</span>&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vec_type ev = av*bv + cv*dv;
store_a(&amp;amp;e[i],ev); } <span class="comment">// Remaining part of the loop // ... </span></pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>Or, if you want to be more concise:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt; a,b,c,d,e;
<span class="comment">// ... resize a, b, c, d, and e so they hold n elements</span>
<span class="keyword">typedef</span> simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;::type vec_type;
size_t vec_size = simd_vector_traits&lt;<span class="predefined-type">float</span>&gt;::size;
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/vec_size; i += vec_size)
{
    vec_type ev = load_a(&amp;amp;a[i])*load_a(&amp;amp;b[i]) + load_a(&amp;amp;c[i])*load_a(&amp;amp;d[i]));
    store_a(&amp;amp;e[i], ev);
}
<span class="comment">// Remaining part of the loop</span>
<span class="comment">// ...</span>
</pre></td>
</tr></table>
 </figure></notextile></div></float></float></float></p>

<p>We’ve reached our goal, we can use intrinsics almost as we use float; in a real application code, it is likely
that you initialize the wrappers through load functions, then perform the computations and finally store the
results (like in the not concise version of the generic loop); thus the only difference between classical code
and code with SIMD wrappers is the initialization and storing of wrappers (and eventually the functions signatures
if you want to pass wrappers instead of scalars), the other parts should be exactly the same and the code remains
easy to read and to maintain.</p>

<h3 id="detecting-the-supported-instruction-set">4.3 Detecting the supported instruction set</h3>

<p>Until now, we’ve assumed we were able to detect at compile time the available instruction set. Let’s see now how
to do that. Compilers often provide preprocessor tokens depending on the available instruction set, but these tokens
may vary from one compiler to another, so we have to standardize that. On most 64-bit compilers, the tokens look
like <strong>__SSE__</strong> or <strong>__SSE3__</strong>, on 32-bit systems, Microsoft compiler sets the preprocessor token
<strong>_M_IX86_FP</strong> to 1 for SSE (vectorization of float) and 2 for SSE2 (vetorization of double and integers).</p>

<p>Here is how we can standardize that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_config.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
</pre></td>
  <td class="code"><pre>
<span class="preprocessor">#if</span> (defined(_M_AMD64) || defined(_M_X64) || defined(&lt;strong&gt;amd64)) &amp;amp;&amp;amp; ! defined(__x86&lt;em&gt;<span class="integer">64</span>__)
    <span class="preprocessor">#define</span> __x86&lt;/em&gt;<span class="integer">64</span>&lt;/strong&gt; <span class="integer">1</span>
<span class="preprocessor">#endif</span>&lt;/p&gt;

&lt;p&gt;<span class="comment">// Find sse instruction set from compiler macros if SSE_INSTR_SET not defined</span>
<span class="comment">// Note: Not all compilers define these macros automatically</span>
<span class="preprocessor">#ifndef</span> SSE_INSTR_SET
    <span class="preprocessor">#if</span> defined ( &lt;strong&gt;AVX2&lt;/strong&gt; )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">8</span>
    <span class="preprocessor">#elif</span> defined ( &lt;strong&gt;AVX&lt;/strong&gt; )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">7</span>
    <span class="preprocessor">#elif</span> defined ( &lt;strong&gt;SSE4&lt;em&gt;<span class="integer">2</span>__ )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">6</span>
    <span class="preprocessor">#elif</span> defined ( __SSE4&lt;/em&gt;<span class="integer">1</span>&lt;/strong&gt; )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">5</span>
    <span class="preprocessor">#elif</span> defined ( &lt;strong&gt;SSSE3&lt;/strong&gt; )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">4</span>
    <span class="preprocessor">#elif</span> defined ( &lt;strong&gt;SSE3&lt;/strong&gt; )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">3</span>
    <span class="preprocessor">#elif</span> defined ( &lt;strong&gt;SSE2&lt;/strong&gt; ) || defined ( &lt;strong&gt;x86_64&lt;/strong&gt; )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">2</span>
    <span class="preprocessor">#elif</span> defined ( &lt;strong&gt;SSE&lt;/strong&gt; )
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">1</span>
    <span class="preprocessor">#elif</span> defined ( _M_IX86_FP )           <span class="comment">// Defined in MS compiler on 32bits system. 1: SSE, 2: SSE2</span>
        <span class="preprocessor">#define</span> SSE_INSTR_SET _M_IX86_FP
    <span class="preprocessor">#else</span>
        <span class="preprocessor">#define</span> SSE_INSTR_SET <span class="integer">0</span>
    <span class="preprocessor">#endif</span> <span class="comment">// instruction set defines</span>
<span class="preprocessor">#endif</span> <span class="comment">// SSE_INSTR_SET</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Now we can use the <strong>SSE_INSTR_SET</strong> token to include the right file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_config.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
</pre></td>
  <td class="code"><pre>
<span class="preprocessor">#</span><span class="comment">// Include the appropriate header file for intrinsic functions</span>
<span class="preprocessor">#if</span> SSE_INSTR_SET &amp;gt; <span class="integer">7</span>                  <span class="comment">// AVX2 and later</span>
    <span class="preprocessor">#ifdef</span> &lt;strong&gt;GNUC&lt;/strong&gt;
        <span class="preprocessor">#include</span> <span class="include">&lt;x86intrin.h&gt;</span>         <span class="comment">// x86intrin.h includes header files for whatever instruction</span>
                                       <span class="comment">// sets are specified on the compiler command line, such as:</span>
                                       <span class="comment">// xopintrin.h, fma4intrin.h</span>
    <span class="preprocessor">#else</span>
        <span class="preprocessor">#include</span> <span class="include">&lt;immintrin.h&gt;</span>         <span class="comment">// MS version of immintrin.h covers AVX, AVX2 and FMA3</span>
    <span class="preprocessor">#endif</span> <span class="comment">// __GNUC__</span>
<span class="preprocessor">#elif</span> SSE_INSTR_SET == <span class="integer">7</span>
    <span class="preprocessor">#include</span> <span class="include">&lt;immintrin.h&gt;</span>             <span class="comment">// AVX</span>
<span class="preprocessor">#elif</span> SSE_INSTR_SET == <span class="integer">6</span>
    <span class="preprocessor">#include</span> <span class="include">&lt;nmmintrin.h&gt;</span>             <span class="comment">// SSE4.2</span>
<span class="preprocessor">#elif</span> SSE_INSTR_SET == <span class="integer">5</span>
    <span class="preprocessor">#include</span> <span class="include">&lt;smmintrin.h&gt;</span>             <span class="comment">// SSE4.1</span>
<span class="preprocessor">#elif</span> SSE_INSTR_SET == <span class="integer">4</span>
    <span class="preprocessor">#include</span> <span class="include">&lt;tmmintrin.h&gt;</span>             <span class="comment">// SSSE3</span>
<span class="preprocessor">#elif</span> SSE_INSTR_SET == <span class="integer">3</span>
    <span class="preprocessor">#include</span> <span class="include">&lt;pmmintrin.h&gt;</span>             <span class="comment">// SSE3</span>
<span class="preprocessor">#elif</span> SSE_INSTR_SET == <span class="integer">2</span>
    <span class="preprocessor">#include</span> <span class="include">&lt;emmintrin.h&gt;</span>             <span class="comment">// SSE2</span>
<span class="preprocessor">#elif</span> SSE_INSTR_SET == <span class="integer">1</span>
    <span class="preprocessor">#include</span> <span class="include">&lt;xmmintrin.h&gt;</span>             <span class="comment">// SSE</span>
</pre></td>
</tr></table>
 </figure></notextile></div></xmmintrin.h></emmintrin.h></pmmintrin.h></tmmintrin.h></smmintrin.h></nmmintrin.h></immintrin.h></immintrin.h></x86intrin.h></p>

<p>Note that if you split the implementation of SSE wrappers and AVX wrappers into different files, you
can also use the <strong>SSE_INSTR_SET</strong> token to include the implementation file in the simd.hpp file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>
<span class="preprocessor">#include</span> <span class="error">“</span>nx_simd_config.hpp<span class="error">”</span>
<span class="preprocessor">#if</span> SSE_INSTR_SET &amp;gt; <span class="integer">6</span>
    <span class="preprocessor">#include</span> <span class="error">“</span>simd_avx.hpp<span class="error">”</span>
<span class="preprocessor">#endif</span>
<span class="preprocessor">#if</span> SSE_INSTR_SET &amp;gt; <span class="integer">0</span>
    <span class="preprocessor">#include</span> <span class="error">“</span>simd_sse.hpp<span class="error">”</span>
<span class="preprocessor">#endif</span>&lt;/p&gt;

&lt;p&gt;<span class="comment">// Definition of traits and generic load and store functions</span>
<span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Now from the client code, the only file to include is simd.hpp, dans everything will be available.</p>

<h3 id="going-further">4.4 Going further</h3>

<p>Now that we have nice wrappers providing basic functionalities, what could be the next step ?
Well, first we could add a method to retrieve an element in the vector:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_base.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">class</span> <span class="class">simd_vector</span>
    {
    <span class="directive">public</span>:&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="keyword">typedef</span> simd_vector_traits&amp;lt;X&amp;gt;::value_type value_type;

    <span class="comment">// ...</span>

    value_type <span class="directive">operator</span>[](size_t index) <span class="directive">const</span>
    {
        size_t size = simd_vector_traits&amp;lt;X&amp;gt;::size;
        value_type v[size];
        (*<span class="local-variable">this</span>)().store_u(v);
        <span class="keyword">return</span> v[index];
    }
}; </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>We can add horizontal add function, useful for linear algebra products:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
    <span class="directive">inline</span> <span class="predefined-type">float</span> hadd(<span class="directive">const</span> vector4f&amp;amp; rhs)
    {
    <span class="preprocessor">#if</span> SSE_INSTR_SET &amp;gt;= <span class="integer">3</span> <span class="comment">// SSE3</span>
        __m128 tmp0 = _mm_hadd_ps(rhs,rhs);
        __m128 tmp1 = _mm_hadd_ps(tmp0,tmp0);
    <span class="preprocessor">#else</span>
        __m128 tmp0 = _mm_add_ps(rhs,_mm_movehl_ps(rhs,rhs));
        __m128 tmp1 = _mm_add_ss(tmp0,_mm_shuffle_ps(tmp0,tmp0,<span class="integer">1</span>));
    <span class="preprocessor">#endif</span>
        <span class="keyword">return</span> _mm_cvtss_f32(tmp1);
    }
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Another usefull stuffs would be to write overloads of standard mathematical functions (exp, log, etc) that work
with the wrappers.</p>

<p>As you can see, writing the wrappers is just a beginning, you can then enrich them with whatever functionality
you need but this goes beyond the topic of this series of articles.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing C++ Wrappers for SIMD Intrinsics (4)]]></title>
    <link href="http://jmabille.github.io/blog/2014/10/13/writing-c-plus-plus-wrappers-for-simd-intrinsics-4/"/>
    <updated>2014-10-13T22:46:01+02:00</updated>
    <id>http://jmabille.github.io/blog/2014/10/13/writing-c-plus-plus-wrappers-for-simd-intrinsics-4</id>
    <content type="html"><![CDATA[<h2 id="plugging-the-wrappers-into-existing-code">3. Plugging the wrappers into existing code</h2>

<h3 id="storing-vector4f-instead-of-float">3.1 Storing vector4f instead of float</h3>

<p>Now we have nice wrappers, let’s see how we can use them in real code. Suppose you have the following
computation loop:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt; a, b, c, d, e;
<span class="comment">// somewhere in the code, a, b, c, d and e are</span>
<span class="comment">// resized so they hold n elements</span>
<span class="comment">// ...</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n; ++i)
{
    e[i] = a[i]*b[i] + c[i]*d[i];
}
</pre></td>
</tr></table>
 </figure></notextile></div></float></p>

<!-- more -->

<p>A first solution could be to store vector of vector4f instead of vector of float:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;vector4f&gt; a, b ,c, d, e;
<span class="comment">// somewhere in the code, a, b, c, d and e are</span>
<span class="comment">// resized so they hold n/4 vector4f</span>
<span class="comment">// ...</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/<span class="integer">4</span>; ++i)
{
    e[i] = a[i]*b[i] + c[i]*d[i];
}
</pre></td>
</tr></table>
 </figure></notextile></div></vector4f></p>

<p>Not so bad, thanks to the operators overloads, the code is exactly the same as the one for float, but
the operations are performed on four floats at once. If n is not a multiple of four, we allocate an
additional vector4f in each vector and we initialize the useless elements with 0.</p>

<p>The problem is you could need to work with the scalar instead of the vector4f, for instance if you search
for a specific element in the vector or if you fill your vector pushing back elements one by one. In this
case, you would have to recode any piece of algorithm that works on single elements (and that includes a
lot of STL algorithms) and then add special code for working on scalars within a vector4f. Working on
scalars within vector4f is possible (we’ll see later how to modify our wrappers so we can do ir), but is
slower than working directly on scalars, thus you could lose the benefits of using vectorization.</p>

<h3 id="initializing-vector4f-from-container-of-float">3.2 Initializing vector4f from container of float</h3>

<p>Another solution could be to initialize the wrapper from values stored in a vector:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt;a, b, c, d, e;
<span class="comment">// somewhere in the code, a, b, c, d and e are</span>
<span class="comment">// resized so they hold n elements</span>
/ ...
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/<span class="integer">4</span>; i += <span class="integer">4</span>)
{
    vector4f av(a[i],a[i+<span class="integer">1</span>],a[i+<span class="integer">2</span>],a[i+<span class="integer">3</span>]);
    vector4f bv(b[i],b[i+<span class="integer">1</span>],b[i+<span class="integer">2</span>],b[i+<span class="integer">3</span>]);
    vector4f cv(c[i],c[i+<span class="integer">1</span>],c[i+<span class="integer">2</span>],c[i+<span class="integer">3</span>]);
    vector4f dv(d[i],d[i+<span class="integer">1</span>],d[i+<span class="integer">2</span>],d[i+<span class="integer">3</span>]);&lt;/<span class="predefined-type">float</span>&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vector4f ev = av*bv + cv*dv;
<span class="comment">// how do we store ev in e[i],e[i+1],e[i+2],e[i+3] ? } for(size_t i = n/4; i &amp;lt; n; ++i) {</span>
e[i] = a[i]*b[i] + c[i]*d[i]; } </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>The first problem is we need a way to store a vector4f into 4 floats; as said in the previous paragraph, we
can add to our wrappers a method that returns a scalar within the vector4f and invoke it that way:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>
e[i]   = ev[<span class="integer">0</span>];
e[i+<span class="integer">1</span>] = ev[<span class="integer">1</span>];
e[i+<span class="integer">2</span>] = ev[<span class="integer">2</span>];
e[i+<span class="integer">3</span>] = ev[<span class="integer">3</span>];
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>The second problem is this code is not generic; if you migrate from SSE to AVX, you’ll have to update the
initialization of your wrapper so it takes 8 floats; the same for storing your vector4f in scalar results.</p>

<p>What we need here is a way to load float into vector4f and to store vector4f into floats that doesn’t
depend on the size of vector4f (that is, 4). That’s the aim of the load and store intrinsics.</p>

<h3 id="load-from-and-store-to-memory">3.3 Load from and store to memory</h3>

<p>If you take a look at the xmmintrin.h file, you’ll notice the compiler provides two kinds of load and store
intrinsics :</p>

<ul>
  <li>_mm_load_ps / _mm_store_ps : these functions require the source / destination memory buffer to be aligned;
the alignment boundary depends on the version of the SIMD you’re using : 16 bits for SSE2, 32 bits for AVX.</li>
  <li>_mm_loadu_ps / _mm_storeu_ps : these functions don’t require any alignment of the source / destination
memory buffer.</li>
</ul>

<p>Intrinsics with alignment constraints are faster, and should be used by default; however, even if memory allocations
are aligned, you can’t guarantee that the memory buffer you pass to load / store function is aligned. Indeed, consider
the matrix product C=AxB, where A is a 15x15 matrix of floats with linear row storage and B a vector that holds 15
float elements. The computation of C[1] starts with:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
vector4f tmp(<span class="integer">0</span>);
<span class="keyword">for</span>(size_t k = <span class="integer">0</span>; k &amp;lt; <span class="integer">12</span>; k+=<span class="integer">4</span>)
{
    tmp += loadu(a+<span class="integer">15</span>+k) * load(b+k);
}
<span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Here, if A is 16-byte aligned, since the size of a float is 4 bytes, a[15], a[19] and a[23] aren’t 16-byte aligned, and you
have to use the unaligned overload of the intrinsics (designated by the generic <em>loadu</em> function in the sample code).</p>

<p>Here’s how we need to update our wrappers to handle load and store functions:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span> : <span class="directive">public</span> simd_vector&lt;vector4f&gt;
{
<span class="directive">public</span>:&lt;/vector4f&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="comment">// ...</span>

<span class="directive">inline</span> vector4f&amp;amp; load_a(<span class="directive">const</span> <span class="predefined-type">float</span>* src)
{
    m_value = _mm_load_ps(src);
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> vector4f&amp;amp; load_u(<span class="directive">const</span> <span class="predefined-type">float</span>* src)
{
    m_value = _mm_loadu_ps(src);
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> <span class="directive">void</span> store_a(<span class="predefined-type">float</span>* dst) <span class="directive">const</span>
{
    _mm_store_ps(dst,m_value);
}

<span class="directive">inline</span> <span class="directive">void</span> store_u(<span class="predefined-type">float</span>* dst) <span class="directive">const</span>
{
    _mm_storeu_ps(dst,m_value);
} }; </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>Assuming the memory buffer of std::vector is 16-bytes aligned, the sample code becomes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt;a, b, c, d, e;
<span class="comment">// somewhere in the code, a, b, c, d and e are</span>
<span class="comment">// resized so they hold n elements</span>
/ ...
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/<span class="integer">4</span>; i += <span class="integer">4</span>)
{
    vector4f av; av.load_a(&amp;amp;a[i]);
    vector4f bv; bv.load_a(&amp;amp;b[i));
    vector4f cv; cv.load_a(&amp;amp;c[i]);
    vector4f dv; dv.load_a(&amp;amp;d[i]);&lt;/<span class="predefined-type">float</span>&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vector4f ev = av*bv + cv*dv;
ev.store_a(&amp;amp;e[i]); } <span class="keyword">for</span>(size_t i = n/<span class="integer">4</span>; i &amp;lt; n; ++i) {
e[i] = a[i]*b[i] + c[i]*d[i]; } </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>Now, if we migrate our code from SSE to AVX, all we have to do is to replace vector4f by vector8f! (Ok, we also have to deal
with memory alignment issues, I come back to this in a few moments). We’ll see in a future section how we can avoid the explicit
usage of vector4f so we get full genericity. But for now, we have to face a last problem: in the sample code, we assumed the
memory buffer wrapped by std::vector was 16-bytes aligned. How do we know a memory allocation is aligned, and how do we know the
boundary alignment ?</p>

<p>The answer is it depends on your system and your compiler. On Windows 64 bits, dynamic memory allocation is 16-bytes aligned; in GNU
systems, a block returned by malloc or realloc is always a multiple of 8 (32-bit systems) or 16 (64-bit system). So if we want to
write code generic enough to handle many SIMD instruction set, it’s clear we must provide a way to ensure memory allocation is
always aligned, and is aligned on a given boundary.</p>

<p><a name="simd_memory_allocator"></a>The solution is to design an aligned memory allocator and to use it in std::vector:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">typedef</span> aligned_allocator&amp;lt;<span class="integer">16</span>&amp;gt; simd_allocator;
std::vector&amp;lt;<span class="predefined-type">float</span>,simd_allocator&amp;gt; a,b,c,d,e.
<span class="comment">// ….</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Now, we can handle any alignment boundary requirement through a typedef :
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">typedef</span> aligned_allocator&amp;lt;<span class="integer">16</span>&amp;gt; simd_allocator_sse; <span class="comment">// SSE</span>
<span class="keyword">typedef</span> aligned_allocator&amp;lt;<span class="integer">32</span>&amp;gt; simd_allocator_avx; <span class="comment">// AVX </span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<h3 id="conditional-branch">3.4 Conditional branch</h3>

<p>Another issue we have to deal with, when we plug our wrapper, is conditional branching; indeed the “if(condition) … else” statement
evaluates a branch depending on the scalar condition, but the if statement works only for scalar condition, and we can’t directly
override it so it works with our wrappers. Consider the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre>
std::vector&lt;<span class="predefined-type">float</span>&gt; a,b,c,d,e;
<span class="comment">// ... initialization of a, b, c and d</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; a.size(); ++i)
{
    <span class="keyword">if</span>(a[i] &amp;gt; <span class="integer">0</span>)
    {
        e[i] = a[i]*b[i] + c[i]*d[i];
    }
    <span class="keyword">else</span>
    {
        e[i] = b[i] + c[i]*d[i];
    }
}
</pre></td>
</tr></table>
 </figure></notextile></div></float></p>

<p>What we do here is selecting a value for e[i] depending on the sign of a[i]; the code could be written in a suboptimal way:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>
<span class="predefined-type">float</span> select(<span class="predefined-type">bool</span> cond, <span class="predefined-type">float</span> v1, <span class="predefined-type">float</span> v2)
{
    <span class="keyword">return</span> cond ? v1 : v2;
}&lt;/p&gt;

&lt;p&gt;<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; a.size(); ++i)
{
    <span class="predefined-type">float</span> e_tmp1 = a[i]&lt;em&gt;b[i] + c[i]&lt;/em&gt;d[i];
    <span class="predefined-type">float</span> e_tmp2 = b[i] + c[i]*d[i];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;e[i] = select(a[i] &amp;gt; <span class="integer">0</span>, e_tmp1, e_tmp2); } </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>Although the “select” function is a bit overkill in the scalar case, it is exactly what we need for handling conditional
branching with the SIMD wrappers. This means the two values (or “branches”) of the conditional statement will be evaluated
before we choose the one to affect, but we can’t do better. And since you execute your conditional statement on 4 floats
at once, it is still faster than the scalar version, even if suboptimal. The only case where the vectorized code could
have a performance loss compared to the scalar code is if one of the conditional branch takes much more time to compute than
the other and its result is seldom used.</p>

<p>Knowing this, let’s see how we can implement a select function taking SIMD wrappers parameters. Depending on the SSE version,
the compiler may provide a built-in function we can directly use as ternary operator. If not, we have to handle it with old
bitwise logical:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>
vector4f select(<span class="directive">const</span> vector4fb&amp;amp; cond, <span class="directive">const</span> vector4f&amp;amp; a, <span class="directive">const</span> vector4f&amp;amp; b)
{
<span class="comment">// Don’t bother with the SSE_INSTR_SET preprocessor token, we’ll be back ont it later</span>
<span class="preprocessor">#if</span> SSE_INSTR_SET &amp;gt;= <span class="integer">5</span> <span class="comment">// SSE 4.1</span>
    <span class="keyword">return</span> _mm_blendv_ps(b,a,cond);
<span class="preprocessor">#else</span>
    <span class="keyword">return</span> _mm_or_ps(_mm_and_ps(cond,a),_mm_andnot_ps(cond,b));
<span class="preprocessor">#endif</span>
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>That’s it! We can now write the previous loop using full vectorization:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; n/<span class="integer">4</span>; i+=<span class="integer">4</span>)
{
    vector4f av; av.load_a(&amp;amp;a[i]);
    vector4f bv; bv.load_a(&amp;amp;b[i));
    vector4f cv; cv.load_a(&amp;amp;c[i]);
    vector4f dv; dv.load_a(&amp;amp;d[i]);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vector4f e_tmp1 = av*bv + cv*dv;
vector4f e_tmp2 = bv + cv*dv;

vector4f ev = select(av &amp;gt; <span class="integer">0</span>, e_tmp1, e_tmp2);
ev.store_a(&amp;amp;e[i]); } <span class="comment">// scalar version for the last elements of the vectors // ... </span></pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<p>Although this code is far better than using directly intrinsics, it is still very verbose and, worse, not generic. If you want to update
your code so it uses AVX instead of SSE, you have to replace every occurence of vector4f by vector8f, and to change the loop condition
and increment so it takes into account the size of vector8f instead of the one of vector4f. Doing this in real code will quickly become
painful.</p>

<p>What we need here is full genericity, so replacing an instruction set by another requires almost no code change. That the point of
the next section.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing C++ Wrappers for SIMD Intrinsics (3)]]></title>
    <link href="http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-3/"/>
    <updated>2014-10-10T02:35:03+02:00</updated>
    <id>http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-3</id>
    <content type="html"><![CDATA[<h2 id="a-namesection2a2-first-version-of-wrappers"><a name="section_2"></a>2. First version of wrappers</h2>

<p>Now that we know a little more about SSE and AVX, let’s start writing code; the wrappers will have
a data vector member and provide arithmetic, comparison and logical operators overloads. Through this
section, I will mainly focus on vector4f, the wrapper around __m128, but translating the code for
other data vectors should not be difficult thanks to the previous section. Since the wrappers will be
used as numerical types, they must have value semantics, that is they must define copy constructor,
assignment operator and non-virtual destructor.</p>

<!-- more -->

<h3 id="initialization-and-assignment">2.1 Initialization and assignment</h3>

<p>SSE and AVX data vectors can be initialized from different inputs : a single value for all elements,
a value per element, or another data vector.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span>
{
<span class="directive">public</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4f() {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f) : m_value(_mm_set1_ps(f)) {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f0, <span class="predefined-type">float</span> f1, <span class="predefined-type">float</span> f2, <span class="predefined-type">float</span> f3) : m_value(_mm_setr_ps(f0,f1,f2,f3)) {}
<span class="directive">inline</span> vector4f(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> vector4f(<span class="directive">const</span> vector4f&amp;amp; rhs) : m_value(rhs.m_value) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> vector4f&amp;amp; rhs)
{
    m_value = rhs.m_value;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; }; </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<h3 id="implicit-conversion">2.2 Implicit conversion</h3>

<p>The operators overloads have to access the m_value member of the wrapper so they can pass it as an argument to the intrinsic
functions :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>overload sample</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_add_ps(lhs.m_value,rhs.m_value);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>We could declare the operator overloads as friend functions of the wrapper class, or provide a get method returning the internal
m_value. Both of these solutions work, but aren’t elegant : the first requires a huge amount of friend declarations, the second
produces heavy code unpleasant to read.</p>

<p>A more elegant solution is to provide a conversion operator from vector4f to __m128 ; since vector4f can be implicitly converted
from __m128, we can now use vector4f or __m128 indifferently. Moreover we can save the vector4f copy constructor and assignment
operator :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span>
{
<span class="directive">public</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4f() {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f) : m_value(_mm_set1_ps(f)) {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f0, <span class="predefined-type">float</span> f1, <span class="predefined-type">float</span> f2, <span class="predefined-type">float</span> f3) : m_value(_mm_setr_ps(f0,f1,f2,f3)) {}
<span class="directive">inline</span> vector4f(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> <span class="directive">operator</span> __m128() <span class="directive">const</span> { <span class="keyword">return</span> m_value; }

<span class="comment">// vector4f(const vector4f&amp;amp;) and operator=(const vector4f&amp;amp;) are not required anymore :</span>
<span class="comment">// the conversion operator will be called before calling vector4f(const __m128&amp;amp;)</span>
<span class="comment">// or operator=(const __m128&amp;amp;)</span>
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; }; </pre></td>
</tr></table>
 </figure></notextile></div>
</code></pre>

<h3 id="arithmetic-operators-overloads">2.3 Arithmetic operators overloads</h3>

<p>Next step is to write the arithmetic operators overloads. The classic way to do this is to write
computed assignment operators and to use them in operators overloads, so they don’t have to access
private members of vector4f; but since vector4f can be implicitly converted to __m128, we can
do the opposite and avoid using a temporary (this won’t have any impact on performance since
the compiler can optimize it, but produces shorter and more pleasant code to read) :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span>
{
<span class="directive">public</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="comment">// ...</span>

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>+=(<span class="directive">const</span> vector4f&amp;amp; rhs)
{
    *<span class="local-variable">this</span> = *<span class="local-variable">this</span> + rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
} };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_add_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<h3 id="the-need-for-a-base-class">2.4 The need for a base class</h3>

<p>We could go ahead and write the remaining arithmetic operators overloads, just as we did before :
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
</pre></td>
  <td class="code"><pre>
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp;, <span class="directive">const</span> vector4f&amp;amp;);
<span class="comment">// Adds the same float value to each data vector member</span>
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp;, <span class="directive">const</span> <span class="predefined-type">float</span>&amp;amp;);
vector4f <span class="directive">operator</span>+(<span class="directive">const</span> <span class="predefined-type">float</span>&amp;amp;, <span class="directive">const</span> vector4f&amp;amp;);&lt;/p&gt;

&lt;p&gt;<span class="comment">// Similar for operator-, operator* and operator/</span>
<span class="comment">// …&lt;/p&gt;</span>

&lt;p&gt;vector4f <span class="directive">operator</span>-(<span class="directive">const</span> vector4f&amp;amp;);&lt;/p&gt;

&lt;p&gt;vector4f&amp;amp; <span class="directive">operator</span>++();
vector4f <span class="directive">operator</span>++(<span class="predefined-type">int</span>);&lt;/p&gt;

&lt;p&gt;<span class="comment">// Similar for operator–</span>
<span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>But wait! Whenever you add a new wrapper, you’ll have to write these operators overloads again. Besides
the fact you’ll type a lot of boilerplate code, computed assignment operators will be the same as those
of vector4f (that is, invoke the corresponding operator overload and return the object), and even some
operators overloads will have the same code as the one of vector4f operators. Code duplication is never
good, and we should look for ways to avoid it.</p>

<p>If we had encountered this problem for classes with entity semantics, we would have captured the common code
into a base class, and delegate the specific behavior to virtual methods, a typical use of classical dynamic
polymorphism. What we need here is an equivalent architecture for classes with value semantics and no virtual
methods (since virtual assignment operators are nonsense). This equivalent architecture is the CRTP
(Curiously Recurring Template Pattern). A lot has been written about CRTP and I will not dwell on it. If you
don’t know about this pattern, the most important thing to know is CRTP allows you to invoke methods of inheriting
classes from the base class just as you would do through virtual methods, except the target methods are resolved
at compile time.</p>

<p>Let’s call our base class simd_vector, it will be used as base class for every wrapper ; here is what it should
look like :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_base.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
<a href="#n66" name="n66">66</a>
<a href="#n67" name="n67">67</a>
<a href="#n68" name="n68">68</a>
<a href="#n69" name="n69">69</a>
<strong><a href="#n70" name="n70">70</a></strong>
<a href="#n71" name="n71">71</a>
<a href="#n72" name="n72">72</a>
<a href="#n73" name="n73">73</a>
<a href="#n74" name="n74">74</a>
<a href="#n75" name="n75">75</a>
<a href="#n76" name="n76">76</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">struct</span> simd_vector_traits;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">class</span> <span class="class">simd_vector</span>
    {
    <span class="directive">public</span>:&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="keyword">typedef</span> <span class="keyword">typename</span> simd_vector_traits&amp;lt;X&amp;gt;::value_type value_type;

    <span class="comment">// downcast operators so we can call methods in the inheriting classes</span>
    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>()() { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;X*&amp;gt;(<span class="local-variable">this</span>); }
    <span class="directive">inline</span> <span class="directive">const</span> X&amp;amp; <span class="directive">operator</span>()() <span class="directive">const</span> { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;<span class="directive">const</span> X*&amp;gt;(<span class="local-variable">this</span>); }

    <span class="comment">// Additional assignment operators</span>
    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>+=(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>)() + rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>+=(<span class="directive">const</span> value_type&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>)() + X(rhs);
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="comment">// Same for operator-=, operator*=, operator/= ...</span>
    <span class="comment">// ...</span>

    <span class="comment">// Increment operators</span>
    <span class="directive">inline</span> X <span class="directive">operator</span>++(<span class="predefined-type">int</span>)
    {
        X tmp = (*<span class="local-variable">this</span>)();
        (*<span class="local-variable">this</span>) += value_type(<span class="integer">1</span>);
        <span class="keyword">return</span> tmp;
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>++()
    {
        (*<span class="local-variable">this</span>)() += value_type(<span class="integer">1</span>);
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="comment">// Similar decrement operators</span>
    <span class="comment">// ...</span>

<span class="directive">protected</span>:

    <span class="comment">// Ensure only inheriting classes can instantiate / copy / assign simd_vector.</span>
    <span class="comment">// Avoids incomplete copy / assignment from client code.</span>
    <span class="directive">inline</span> simd_vector() {}
    <span class="directive">inline</span> ~simd_vector() {}

    <span class="directive">inline</span> simd_vector(<span class="directive">const</span> simd_vector&amp;amp;) {}
    <span class="directive">inline</span> simd_vector&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span>  simd_vector&amp;amp;) { <span class="keyword">return</span> *<span class="local-variable">this</span>; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> simd_vector&lt;x&gt; <span class="directive">operator</span>+(<span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; lhs,
                                    <span class="directive">const</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::type&amp;amp; rhs)
    {
        <span class="keyword">return</span> lhs() + X(rhs);
    }&lt;/x&gt;&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> simd_vector&lt;x&gt; <span class="directive">operator</span>+(<span class="directive">const</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::type&amp;amp; lhs,
                                    <span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> X(lhs) + rhs();
    }&lt;/x&gt;&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="comment">// Same for operator-, operator*, operator/</span>
<span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Now, all vector4f needs to do is to inherit from simd_vector and implement the traditional operator+, and
it will get operator+= and the operator+ overloads for free (and the same for other arithmetic operators) :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4f</span> : <span class="directive">public</span> simd_vector&lt;vector4f&gt;
{
<span class="directive">public</span>:&lt;/vector4f&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4f() {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f) : m_value(_mm_set1_ps(f)) {}
<span class="directive">inline</span> vector4f(<span class="predefined-type">float</span> f0, <span class="predefined-type">float</span> f1, <span class="predefined-type">float</span> f2, <span class="predefined-type">float</span> f3) : m_value(_mm_setr_ps(f0,f1,f2,f3)) {}
<span class="directive">inline</span> vector4f(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4f&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> <span class="directive">operator</span> __m128() <span class="directive">const</span> { <span class="keyword">return</span> m_value; }

<span class="comment">// No more operator+= since it is implemented in the base class</span>
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="comment">// Based on this operator implementation, simd_vector&lt;vector4f&gt; will generate</span>
<span class="comment">// the following methods and overloads :</span>
<span class="comment">// vector4f&amp;amp; operator+=(const vector4f&amp;amp;)</span>
<span class="comment">// vector4f operator++(int)</span>
<span class="comment">// vector4f&amp;amp; operator++()</span>
<span class="comment">// vector4f operator+(const vector4f&amp;amp;, ocnst float&amp;amp;)</span>
<span class="comment">// vector4f operator+(const float&amp;amp;, const vector4f&amp;amp;)</span>
<span class="directive">inline</span> vector4f <span class="directive">operator</span>+(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_add_ps(lhs,rhs);
}&lt;/vector4f&gt;&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>-(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_sub_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>*(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_mul_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4f <span class="directive">operator</span>/(<span class="directive">const</span> vetcor4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_div_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Looks good, doesn’t it ? Every time we want to implement a new wrapper, we only have to code 4 operators and
make our class inherit from simd_vector, and all overloads will be generated for free!</p>

<p>Just one remark before we continue with comparison operators ; if you have noticed, the base class simd_vector
defines a type named value_type, depending on the nature of the inheriting class (float for vector4f, double
for vector2d, …). However, this type is not defined by the inheriting class, but by a traits class instead.
This is a CRTP constraint : you can access the inheriting class as long the compiler doesn’t instantiate the
code; if you call a method defined in the inheriting class, the compiler will assume it exists until it has to
instantiate the code. But type resolution is different and you have to define it out of the inheriting class.
This is one reason for the existence of the simd_vector_traits class. Other reasons will be discussed in a later
section. Note the class containing the type definition doesn’t have to be fully defined at this point : a simple
forward declaration is sufficient.</p>

<h3 id="comparison-operators">2.5 Comparison operators</h3>

<p>Since ordinary comparison operators return boolean value, we need to implement SIMD wrappers for boolean. The
number of boolean elements of the wrappers will be directly related to the number of floating values wrapped
by our arithmetic wrappers.</p>

<p>In order not to duplicate code, we’ll use the same architecture as for arithmetic wrappers : a CRTP with
base class for common code, and inheriting classes for specific implementation. Here is the implementation
of the simd_vector_bool class, the base used to generate bitwise assignment operators and logical operators
overloads in inheriting classes :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_base.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="keyword">class</span> <span class="class">simd_vector_bool</span>
    {
    <span class="directive">public</span>:&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>()() { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;X*&amp;gt;(<span class="local-variable">this</span>); }
    <span class="directive">inline</span> <span class="directive">const</span> X&amp;amp; <span class="directive">operator</span>()() <span class="directive">const</span> { <span class="keyword">return</span> *<span class="keyword">static_cast</span>&amp;lt;<span class="directive">const</span> X*&amp;gt;(<span class="local-variable">this</span>); }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>&amp;amp;=(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>) = (*<span class="local-variable">this</span>) &amp;amp;&amp;amp; rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>|(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>) || rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

    <span class="directive">inline</span> X&amp;amp; <span class="directive">operator</span>^=(<span class="directive">const</span> X&amp;amp; rhs)
    {
        (*<span class="local-variable">this</span>)() = (*<span class="local-variable">this</span>)() ^ rhs;
        <span class="keyword">return</span> (*<span class="local-variable">this</span>)();
    }

<span class="directive">protected</span>:

    <span class="directive">inline</span> simd_vector_bool() {}
    <span class="directive">inline</span> ~simd_vector_bool() {}

    <span class="directive">inline</span> simd_vector_bool(<span class="directive">const</span> simd_vector_bool&amp;amp;) {}
    <span class="directive">inline</span> simd_vector_bool&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> simd_vector_bool&amp;amp;) { <span class="keyword">return</span> *<span class="local-variable">this</span>; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>&amp;amp;&amp;amp;(<span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; lhs, <span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> lhs() &amp;amp; rhs();
    }&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>&amp;amp;&amp;amp;(<span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; lhs, <span class="predefined-type">bool</span> rhs)
    {
        <span class="keyword">return</span> lhs() &amp;amp; rhs;
    }&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>||(<span class="predefined-type">bool</span> lhs, <span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> lhs &amp;amp; rhs();
    }&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="comment">// Similar for operator|| overloads</span>
<span class="comment">// …&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> X <span class="directive">operator</span>!(<span class="directive">const</span> simd_vector_bool&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> rhs() == <span class="integer">0</span>;
    }
</pre></td>
</tr></table>
 </figure></notextile></div></x></class></p>

<p>The inheriting class vector4fb only has to provide bitwise operators and equality/inequality operators :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
</pre></td>
  <td class="code"><pre>
<span class="keyword">class</span> <span class="class">vector4fb</span> : <span class="directive">public</span> simd_vector_bool&lt;vector4fb&gt;
{
<span class="directive">public</span>:&lt;/vector4fb&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="directive">inline</span> vector4fb() {}
<span class="directive">inline</span> vector4fb(<span class="predefined-type">bool</span> b) : m_value(_mm_castsi128_ps(_mm_set1_epi32(-(<span class="predefined-type">int</span>)b))) {}
<span class="directive">inline</span> vector4fb(<span class="predefined-type">bool</span> b0, <span class="predefined-type">bool</span> b1, <span class="predefined-type">bool</span> b2, <span class="predefined-type">bool</span> b3)
: m_value(_mm_castsi128_ps(_mm_setr_epi32(-(<span class="predefined-type">int</span>)b0,-(<span class="predefined-type">int</span>)b1,-(<span class="predefined-type">int</span>)b2,-(<span class="predefined-type">int</span>)b3))) {}

<span class="directive">inline</span> vector4fb(<span class="directive">const</span> __m128&amp;amp; rhs) : m_value(rhs) {}

<span class="directive">inline</span> vector4fb&amp;amp; <span class="directive">operator</span>=(<span class="directive">const</span> __m128&amp;amp; rhs)
{
    m_value = rhs;
    <span class="keyword">return</span> *<span class="local-variable">this</span>;
}

<span class="directive">inline</span> <span class="directive">operator</span> __m128() <span class="directive">const</span> { <span class="keyword">return</span> m_value; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">private</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__m128 m_value; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>&amp;amp;(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_and_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>|(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_or_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>^(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_xor_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>~(<span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_xor_ps(rhs,_mm_castsi128_ps(_mm_set1_epi32(-<span class="integer">1</span>)));
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>==(<span class="directive">const</span> vector4fb&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmeq_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>!=(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4fb&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmpneq_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Now we have wrappers for boolean, we can add the comparison operators to the vector4f class; again,
to avoid code duplication, some operators will be implemented in the base class and will be based on
specific operators implemented in the inheriting class. Let’s start with the vector4f comparison
operators :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// Definition of vector4f and arithmetic overloads</span>
<span class="comment">// …</span>
<span class="directive">inline</span> vector4fb <span class="directive">operator</span>==(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmpeq_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>!=(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmpneq_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>&amp;lt;(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmplt_ps(lhs,rhs);
}&lt;/p&gt;

&lt;p&gt;<span class="directive">inline</span> vector4fb <span class="directive">operator</span>&amp;lt;=(<span class="directive">const</span> vector4f&amp;amp; lhs, <span class="directive">const</span> vector4f&amp;amp; rhs)
{
    <span class="keyword">return</span> _mm_cmple_ps(lhs,rhs);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Before we implement operator&gt; and operator&gt;= for the base class, we have to focus on their return
type. If these operators were implemented for vector4f, we would have return vector4fb; but since
they are implemented for the base class, they need to return the boolean wrapper related to the
arithmetic wrapper, i.e the inheriting class. What we need here is to provide a mapping between
arithmetic wrapper type and boolean wrapper type somewhere. Remember the simd_vector_traits structure
we declared to define our value_type ? It would be the perfect place for defining that mapping :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_sse.hpp</span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// simd_vector_traits&lt;vector4f&gt; must be defined before vector4f so simd_vector can compile</span>
<span class="comment">// (remember we use simd_vector_traits&lt;x&gt;::value_type in the definition of simd_vector).</span>
<span class="keyword">class</span> <span class="class">vector4f</span>;&lt;/x&gt;&lt;/vector4f&gt;&lt;/p&gt;

&lt;p&gt;<span class="comment">// Full specialization of the template vector_simd_traits declared in simd_base.hpp</span>
<span class="keyword">template</span> &amp;lt;&amp;gt;
    <span class="keyword">struct</span> vector_simd_traits&lt;vector4f&gt;
    {
        <span class="keyword">typedef</span> <span class="predefined-type">float</span> value_type;
        <span class="keyword">typedef</span> simd_vector4fb vetor_bool;
    };&lt;/vector4f&gt;&lt;/p&gt;

&lt;p&gt;<span class="keyword">class</span> <span class="class">vector4f</span>
{
    <span class="comment">// …</span>
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>A last remark before we add the last comparison operators : since the template vector_simd_traits
will never be defined but full specialized instead, there is no risk we forget to define it when
we add a new wrapper, we’ll have a compilation error.</p>

<p>Finally, we can add the missing operators for the base class :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>simd_base.hpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// Declaration of simd_vector and operators</span>
<span class="comment">//…&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::vector_bool
    <span class="directive">operator</span>&amp;gt;(<span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; lhs, <span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> rhs() &amp;lt;= lhs();
    }&lt;/x&gt;&lt;/x&gt;&lt;/x&gt;&lt;/<span class="keyword">class</span><span class="error">&gt;</span>&lt;/p&gt;

&lt;p&gt;<span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="class">x</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>&gt;
    <span class="directive">inline</span> <span class="keyword">typename</span> simd_vector_traits&lt;x&gt;::vector_bool
    <span class="directive">operator</span>&amp;gt;=(<span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; lhs, <span class="directive">const</span> simd_vector&lt;x&gt;&amp;amp; rhs)
    {
        <span class="keyword">return</span> rhs() &amp;lt; lhs();
    }
</pre></td>
</tr></table>
 </figure></notextile></div></x></x></x></class></p>

<h3 id="logical-operators">2.6 Logical operators</h3>

<p>Since float provides logical operators, our wrapper should do so. The implementation is the same
as for the simd_vector_bool class, that is logical assignment operator in the simd_vector base class,
and operator overloads for the inheriting classes. The implementation of operator|, operator&amp;, operator^
and operaotr~ is the same as the one for vector4fb, so I don’t repeat it here.</p>

<h3 id="next-step">2.7 Next step</h3>

<p>Next step is to implement wrapper for 2 double, then wrapper for 8 float and 4 double if you want to support
AVX. You can also implement wrappers for int if you aim to do integre computation. The implementation is
similar to what has been done in this section.</p>

<p>Now we have nice wrappers, we’ll see in the next section how to plug them into existing code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing C++ Wrappers for SIMD Intrinsics (2)]]></title>
    <link href="http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-2/"/>
    <updated>2014-10-10T00:54:37+02:00</updated>
    <id>http://jmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-2</id>
    <content type="html"><![CDATA[<h2 id="a-namesection1a1-sseavx-intrinsics"><a name="section_1"></a>1. SSE/AVX intrinsics</h2>

<p>Before we start to write any code, we need to take a look at the instrinsics the compiler provides, and how things are
organized. For the rest of this article and the following ones, I assume we use an Intel processor, recent enough to
provide SSE 4 and AVX; the compiler can be gcc or MSVC, the instrinsics they provide are almost the same.</p>

<p>If you already know about SSE / AVX intrinsics you can skip this section.
<!-- more --></p>

<h3 id="registers">1.1 Registers</h3>

<p>SSE uses eight 128 bits registers, from xmm0 to xmm7; Intel and AMD 64 bits extensions adds eight more registers, from
xmm8 to xmm15; thus SSE intrinsics can perform on 4 packed float, 2 packed double, 4 32-bits integers, etc …</p>

<p>With AVX, the width of the SIMD registers is increased from 128 to 256 bits; the register are renamed from xmm0-xmm7
to ymm0-ymm7 (and from xmm8-xmm15 to ymm8 to ymm15); however legacy sse instructions still can be used, and xmm
registers can still be addressed since they’re the lower part of ymm registers.</p>

<p>AVX512 will increase the width of the SIMD registers from 256 to 512 bits.</p>

<h3 id="files-to-include">1.2 Files to include</h3>

<p>The intrinsic functions are splitted among different files, depending on the version of the SIMD instruction set they
belong to :</p>

<ul>
  <li>&lt;xmmintrin.h&gt; : SSE, operations on 4 single precision floating point numbers (float).</li>
  <li>&lt;emmintrin.h&gt; : SSE 2, operations on integers and on 2 double precision floating point numbers (double).</li>
  <li>&lt;pmmintrin.h&gt; : SSE 3, horizontal operations on SIMD registers.</li>
  <li>&lt;tmmintrin.h&gt; : SSSE 3, additional instructions.</li>
  <li>&lt;smmintrin.h&gt; : SSE 4.1, dot product and many operations on integers</li>
  <li>&lt;nmmintrin.h&gt; : SSE 4.2, additional instructions.</li>
  <li>&lt;immintrin.h&gt; : AVX, operations on integers, 8 float or 4 double.</li>
</ul>

<p>Each of these files includes the previous one, so you only have to include the one matching the highest version of the SIMD
instruction set available in your processor. Later we’ll see how to detect at compile time which version on SIMD instruction
set is available and thus which file to include. For now, just assume we’re able to include the right file each time we need it.</p>

<h3 id="naming-rules">1.3 Naming rules</h3>

<p>Now if you take a look at these files, you’ll notice provided data and functions follow some naming rules :</p>

<ul>
  <li>data vectors are named <strong>__mXXX(T)</strong>, where :
    <ul>
      <li>XXX is the number of bits of the vector (128 for SSE, 256 for AVX)</li>
      <li>is T a character for the type of the data; T is omitted for float, i fot integers and d for double; thus __m128d is the
  data vector to use when performing SSE instructions on double.</li>
    </ul>
  </li>
  <li>intrinsic functions operating on floating point numbers are usually named <strong>_mm(XXX)_NAME_PT</strong>, where :
    <ul>
      <li>XXX is the number of bits of the SIMD registers; it is omitted for 128 bits regusters</li>
      <li>NAME is the short name of the function (add, sub, cmp, …)</li>
      <li>P indicates whether the functions operates on a packed data vector (p) or on a scalar only (s)</li>
      <li>T indicates the type of the floating point numbers : s for single precision, d for double precision</li>
    </ul>
  </li>
  <li>intrinsic functions operating on integers are usually named <strong>_mm(XXX)_NAME_EPSYY</strong>, where :
    <ul>
      <li>XXX is the number of bits of the SIMD registers; it is omitted for 128 bits registers</li>
      <li>NAME is the short name of the function (add, sub, cmp)</li>
      <li>S indicates whether the integers are signed (i) or unsigned (u)</li>
      <li>YY is the number of bits of the integer</li>
    </ul>
  </li>
</ul>

<h3 id="intrinsics-categories">1.4 Intrinsics categories</h3>

<p>Intrinsics encompass a wide set of features; we can distinguish the following categories (not exhausive) :</p>

<ul>
  <li>Arithmetic : _mm_add_xx, _mm_sub_xx, _mm_mul_xx, _mm_div_xx, …</li>
  <li>Logical : _mm_and_xx, _mm_or_xx, _mm_xor_xx, …</li>
  <li>Comparison : _mm_cmpeq_xx, _mm_cmpneq_xx, _mm_cmplt_xx, …</li>
  <li>Conversion : _mm_cvtepixx, …</li>
  <li>Memory move : _mm_load_xx, _mm_store_xx, …</li>
  <li>Setting : _mm_set_xx, _mm_setzero_xx, …</li>
</ul>

<p>Some intrinsics won’t be wrapped, and some of them will bu used only to build higher level functions in the wrappers.</p>

<h3 id="sample-code">1.5 Sample code</h3>

<p>Now you know a little more about SSE and AVX intrinsics, you may reconsider the need for wrapping them; indeed, if you don’t need
to handle other instructions set, you could think of using SSE/AVX intrinsics directly. I hope this sample code will make you
change your mind :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>SSE_sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// computes e = a&lt;em&gt;b + c&lt;/em&gt;d using SSE where a, b, c, d and e are vector of floats</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; e.size(); i += <span class="integer">4</span>)
{
    __m128 val = _mm_add_ps(_mm_mul_ps(_mm_load_ps(&amp;amp;a[i]),_mm_load_ps(&amp;amp;b[i])),
                            _mm_mul_ps(_mm_load_ps(&amp;amp;c[i]),_mm_load_ps(&amp;amp;d[i])));
    _mm_store_ps(&amp;amp;e[i],val);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>Quite hard to read, right ? And this is just for two multiplications and one addition; imagine using intrinsics in a huge amount of code,
and you’ll get code really hard to understand and to maintain. What we need is a way to use __m128 with traditional arithmetic
operators, as we do with float :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>wrapped_sample.cpp </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>
<span class="comment">// computes e = a&lt;em&gt;b + c&lt;/em&gt;d using SSE where a, b, c, d and e are vector of floats</span>
<span class="keyword">for</span>(size_t i = <span class="integer">0</span>; i &amp;lt; e.size(); i += <span class="integer">4</span>)
{
    __m128 val = load(&amp;amp;a[i]) * load(&amp;amp;b[i]) + load(&amp;amp;c[i]) * load(&amp;amp;d[i]);
    store(&amp;amp;e[i],val);
}
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>That’s the aim of the wrappers we start to write in the next section.</p>

]]></content>
  </entry>
  
</feed>
